import ROOT
from collections import OrderedDict
# Charger le fichier ROOT
file_name = "/opt/sbg/cms/ui2_data1/pvaucell/CMSSW_10_6_30_FLY/src/FlyingTop/FlyingTop/test/Signal_2018/RPV_2018_smu200_neu180_ctau001.root"
tree_name = "FlyingTop/ttree"

file = ROOT.TFile.Open(file_name)
tree = file.Get(tree_name)


if not tree:
    print("Erreur : TTree '%s' introuvable dans %s." % (tree_name, file_name))
    exit(1)

original_branches = [
    "eventNumber", 
    "lumiBlock", 
    "tree_LHE_Weights", 
    "tree_MCEvt_weight", 
    "tree_only_gen_wt", 
    "tree_event_weight", 
    "tree_genTop_Weight", 
    "tree_gen_top_pt", 
    "tree_gen_top_rw_pt", 
    "PUweight", 
    "PUweight_Up", 
    "PUweight_Down", 
    "Prefweight", 
    "PU_events", 
    "tree_Filter", 
    "tree_FilterSameSign", 
    "tree_trigger_doublelepton", 
    "tree_trigger_singlelepton", 
    "tree_GenPVx", 
    "tree_GenPVy", 
    "tree_GenPVz", 
    "tree_smu_mass", 
    "tree_neu_mass", 
    "tree_neu_ctau", 
    "tree_Good_PV", 
    "tree_nPV", 
    "tree_PV_x", 
    "tree_PV_y", 
    "tree_PV_z", 
    "tree_PV_ez", 
    "tree_PV_NChi2", 
    "tree_PV_ndf", 
    "tree_PFMet_et", 
    "tree_PFMet_phi", 
    "tree_HT", 
    "tree_TRACK_SIZE", 
    "tree_nTracks", 
    "tree_nLostTracks", 
    "tree_muon_GenRecoTriggerMatched", 
    "tree_all_nmu", 
    "tree_nmu", 
    "tree_LT", 
    "tree_Mmumu", 
    "tree_MmumuSameSign", 
    "tree_muon_isPrompt", 
    "tree_muon_pt", 
    "tree_muon_SF", 
    "tree_muon_eta", 
    "tree_muon_phi", 
    "tree_muon_dxy", 
    "tree_muon_dz", 
    "tree_muon_charge", 
    "tree_muon_correction", 
    "tree_muon_gen", 
    "tree_muon_dxyError", 
    "tree_muon_dzError", 
    "tree_muon_isLoose", 
    "tree_muon_isMedium", 
    "tree_muon_isTight", 
    "tree_muon_isGlobal", 
    "tree_muon_PFIsoVeryLoose", 
    "tree_muon_PFIsoLoose", 
    "tree_muon_PFIsoMedium", 
    "tree_muon_PFIsoTight", 
    "tree_muon_TkIsoLoose", 
    "tree_muon_TkIsoTight", 
    "tree_muon_MiniIsoLoose", 
    "tree_muon_MiniIsoMedium", 
    "tree_muon_MiniIsoTight", 
    "tree_lepton_leadingpt", 
    "tree_lepton_leadingpt2", 
    "tree_lepton_leadingeta", 
    "tree_lepton_leadingeta2", 
    "tree_lepton_leadingphi", 
    "tree_lepton_leadingphi2", 
    "tree_lepton_lepton_dR", 
    "tree_lepton_lepton_dPhi", 
    "tree_lepton_lepton_dEta", 
    "tree_lepton_leadingdxy", 
    "tree_lepton_leadingdxy2", 
    "tree_lepton_leadingdz", 
    "tree_lepton_leadingdz2", 
       "tree_all_nel", 
    "tree_electron_nEle", 
    "tree_electron_isPrompt", 
    "tree_electron_pt", 
    "tree_electron_eta", 
    "tree_electron_phi", 
    "tree_electron_charge", 
    "tree_electron_dxy", 
    "tree_electron_dz", 
    "tree_electron_gen", 
    "tree_electron_energy", 
    "tree_electron_et", 
    "tree_electron_ecal_trk_postcorr", 
    "tree_electron_isoR4", 
    "tree_electron_IsLoose", 
    "tree_electron_IsMedium", 
    "tree_electron_IsTight", 
    "tree_njet", 
    "tree_njetNOmu", 
    "tree_jet_pt", 
    "tree_jet_eta", 
    "tree_jet_phi", 
    "tree_jet_HadronFlavour", 
    "tree_jet_btag_DeepJet", 
    "tree_jet_E", 
    "tree_jet_leadingpt", 
    "tree_jet_leadingpt2", 
    "tree_jet_leadingeta", 
    "tree_jet_leadingeta2", 
    "tree_jet_jet_dR", 
    "tree_jet_jet_dPhi", 
    "tree_jet_jet_dEta", 
    "tree_muon_jet_dRmin", 
    "tree_muon_jet_dRmax", 
    "tree_elemu_jet_dRmin", 
    "tree_elemu_jet_dRmax", 
    "tree_ele_jet_dRmin", 
    "tree_ele_jet_dRmax", 
    "tree_Evts_MVAval", 
    "tree_Evts_MVAvalDY", 
    "tree_Evts_MVAvalTT", 
    "tree_nLLP", 
    "tree_LLP", 
    "tree_LLP_pt", 
    "tree_LLP_eta", 
    "tree_LLP_phi", 
    "tree_LLP_x", 
    "tree_LLP_y", 
    "tree_LLP_z", 
    "tree_LLP_r", 
    "tree_LLP_dist", 
    "tree_LLP_nTrks", 
    "tree_LLP12_dR", 
    "tree_LLP12_deta", 
    "tree_LLP12_dphi", 
    "tree_LLP_Mass", 
    "tree_Hemi", 
    "tree_Hemi_njet", 
    "tree_Hemi_njet_nomu", 
    "tree_Hemi_pt", 
    "tree_Hemi_eta", 
    "tree_Hemi_phi", 
    "tree_Hemi_nTrks", 
    "tree_Hemi_nTrks_sig", 
    "tree_Hemi_nTrks_bad", 
    "tree_Hemi_mass", 
    "tree_HemiMu_mass", 
    "tree_HemiMu_pt", 
    "tree_HemiMu_dR", 
    "tree_HemiMuOp_mass", 
    "tree_HemiMuOp_pt", 
    "tree_HemiMuOp_dR", 
    "tree_Hemi_dR12", 
    "tree_Hemi_LLP", 
    "tree_Hemi_LLP_pt", 
    "tree_Hemi_LLP_eta", 
    "tree_Hemi_LLP_phi", 
    "tree_Hemi_LLP_dist", 
    "tree_Hemi_LLP_x", 
    "tree_Hemi_LLP_y", 
    "tree_Hemi_LLP_z", 
    "tree_Hemi_LLP_dR", 
    "tree_Hemi_LLP_mother", 
    "tree_Hemi_LLP_Vtx_dx", 
    "tree_Hemi_LLP_Vtx_dy", 
    "tree_Hemi_LLP_Vtx_dz", 
    "tree_Hemi_LLP_Vtx_dr", 
    "tree_Hemi_LLP_muOK_dR", 
    "tree_Hemi_LLP_muOK_pt", 
    "tree_Hemi_LLP_muOK_mass", 
    "tree_Hemi_LLP_muNO_dR", 
    "tree_Hemi_LLP_muNO_pt", 
    "tree_Hemi_LLP_muNO_mass", 
    "tree_Hemi_LLP_dR12", 
    "tree_Hemi_LLP_ping", 
    "tree_event_LLP_ping", 

    "tree_Hemi_Vtx_step", 
    "tree_Hemi_Vtx_isTight",
    "tree_Hemi_Vtx_NChi2",
    "tree_Hemi_Vtx_nTrks",
    "tree_Hemi_Vtx_nTrks_sig", 
    "tree_Hemi_Vtx_nTrks_bad", 
    "tree_Hemi_Vtx_x",
    "tree_Hemi_Vtx_y", 
    "tree_Hemi_Vtx_z", 
    "tree_Hemi_Vtx_r",
    "tree_Hemi_Vtx_dR", 
    "tree_Hemi_Vtx_SumtrackWeight",
    "tree_Hemi_Vtx_track_MeanDCA_d",
    "tree_Hemi_Vtx_Mass",
    "tree_Hemi_Vtx_dist",
    "tree_event_nVtx",  
    "tree_event_Vtx_Vtx_dr",
    "tree_event_Vtx_Vtx_dz",
    "tree_event_Vtx_Vtx_dd", 
    "tree_event_Vtx_Vtx_reldd",
    "tree_event_Vtx_Vtx_dR",
    "tree_event_Vtx_Vtx_step", 
    "tree_Hemi_SecLLP", 
    "tree_Hemi_LLP_SecVtx_dz", 
    "tree_Hemi_LLP_SecVtx_dr", 
    "tree_Hemi_SecLLP_ping", 
    "tree_event_SecLLP_ping",  
    "tree_Hemi_SecVtx",  
    "tree_Hemi_SecVtx_step", 
    "tree_Hemi_SecVtx_x", 
    "tree_Hemi_SecVtx_y",
    "tree_Hemi_SecVtx_z",
    "tree_Hemi_SecVtx_r", 
    "tree_Hemi_SecVtx_dR",
    "tree_Hemi_SecVtx_nTrks",  
    "tree_Hemi_SecVtx_NChi2", 
    "tree_Hemi_SecVtx_dist", 
    "tree_Hemi_SecVtx_track_MeanDCA_d", 
    "tree_Hemi_SecVtx_SumtrackWeight",  
    "tree_Hemi_SecVtx_Mass",
    "tree_event_MergedVtx_Vtx_dr", 
    "tree_event_MergedVtx_Vtx_dz", 
    "tree_event_MergedVtx_Vtx_dd", 
    "tree_event_MergedVtx_Vtx_reldd",
    "tree_event_MergedVtx_Vtx_dR",
    "tree_event_MergedVtx_Vtx_step", 
    "tree_Hemi_Vtx_BDT_nTrks", 
    "tree_Hemi_Vtx_BDT_NChi2",
    "tree_Hemi_Vtx_BDT_step", 
    "tree_Hemi_Vtx_BDT_STW", 
    "tree_Hemi_Vtx_BDT_Mass",  
    "tree_Hemi_Vtx_BDT_HMass",
    "tree_Hemi_Vtx_BDT_ntrk10",
    "tree_Hemi_Vtx_BDT_ntrk20", 
    "tree_Hemi_Vtx_BDT_MeanDCA",
    "tree_Hemi_Vtx_MVAval_Loose",   
    "tree_Hemi_Vtx_MVAval_Tight",
    "HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_v", 
    "HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_Mass8_v",
    "HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_Mass3p8_v", 
    "HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_v",
    "HLT_Mu8_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_v",
    "HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_v",
    "HLT_Mu12_TrkIsoVVL_Ele23_CaloIdL_TrackIdL_IsoVL_DZ_v", 
    "HLT_Ele27_WPTight_Gsf_v",
    "HLT_Ele32_WPTight_Gsf_v", 
    "HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v",
    "HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_v",
    "HLT_PFMET120_PFMHT120_IDTight_v",
    "HLT_PFMET120_PFMHT120_IDTight_PFHT60_v",
    "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v",
    "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_v",
    "HLT_PFMET250_HBHECleaned_v",
    "HLT_PFMETTypeOne200_HBHE_BeamHaloCleaned_v",
    "HLT_IsoMu24_v",
    "HLT_IsoMu27_v",
    "HLT_IsoTkMu24_v",
    "HLT_Mu8_TrkIsoVVL_Ele17_CaloIdL_TrackIdL_IsoVL_v",
    "HLT_Mu17_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_v",
    "HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_v",
    "HLT_Mu23_TrkIsoVVL_Ele8_CaloIdL_TrackIdL_IsoVL_DZ_v",
    "HLT_Mu23_TrkIsoVVL_Ele12_CaloIdL_TrackIdL_IsoVL_DZ_v"
]

branches = OrderedDict((branch, "mini" + branch[0] + branch[1:]) for branch in original_branches)

code = """
#include <ROOT/RDataFrame.hxx>
#include <TFile.h>
#include <TTree.h>
#include <iostream>
#include <string>

int main(int argc, char** argv) {
    if (argc < 3) {
        std::cerr << "Usage: " << argv[0] << " <input_file.root> <output_file.root>" << std::endl;
        return 1;
    }

    std::string input_file = argv[1];
    std::string output_file = argv[2];

    ROOT::EnableImplicitMT(8); // Multi-threading
    ROOT::RDataFrame df("FlyingTop/ttree", input_file);

    auto filtered_df = df.Filter("(tree_Filter == true || tree_FilterSameSign == true) && tree_njetNOmu>0", "Filtre global combine");

"""
code += "auto renamed_df = filtered_df"
for old_name, new_name in branches.items():
    code += "\n    .Define(\"{0}\", \"{1}\")".format(new_name, old_name)
code += ";\n"

code += """
    renamed_df.Snapshot("ttree", output_file, {"""
code += ", ".join('"{}"'.format(new_name) for new_name in branches.values())
code += """});

std::cout << "Analyse terminee. TTree sauvegarde dans " << output_file << std::endl;
    return 0;
}
"""
output_file = "MiniNtuple.cpp"
with open(output_file, "w") as f:
    f.write(code)

print("Code genere dans '%s' " % (output_file))
